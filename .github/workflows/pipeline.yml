name: Comprehensive Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - preview

env:
  NODE_VERSION: '20'

concurrency:
  group: pipeline-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ===========================================
  # STAGE 1: Setup & Validation
  # ===========================================
  setup:
    name: üöÄ Stage 1: Setup & Validation
    runs-on: ubuntu-latest
    outputs:
      should-deploy-preview: ${{ steps.deployment-check.outputs.should-deploy-preview }}
      should-deploy-staging: ${{ steps.deployment-check.outputs.should-deploy-staging }}
      should-deploy-production: ${{ steps.deployment-check.outputs.should-deploy-production }}
      environment: ${{ steps.deployment-check.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Determine deployment strategy
        id: deployment-check
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "should-deploy-preview=true" >> $GITHUB_OUTPUT
            echo "should-deploy-staging=false" >> $GITHUB_OUTPUT
            echo "should-deploy-production=false" >> $GITHUB_OUTPUT
            echo "environment=preview" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "should-deploy-preview=false" >> $GITHUB_OUTPUT
            echo "should-deploy-staging=true" >> $GITHUB_OUTPUT
            echo "should-deploy-production=false" >> $GITHUB_OUTPUT
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should-deploy-preview=false" >> $GITHUB_OUTPUT
            echo "should-deploy-staging=false" >> $GITHUB_OUTPUT
            echo "should-deploy-production=true" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.environment }}" == "preview" ]]; then
              echo "should-deploy-preview=true" >> $GITHUB_OUTPUT
              echo "should-deploy-staging=false" >> $GITHUB_OUTPUT
              echo "should-deploy-production=false" >> $GITHUB_OUTPUT
            elif [[ "${{ github.event.inputs.environment }}" == "staging" ]]; then
              echo "should-deploy-preview=false" >> $GITHUB_OUTPUT
              echo "should-deploy-staging=true" >> $GITHUB_OUTPUT
              echo "should-deploy-production=false" >> $GITHUB_OUTPUT
            else
              echo "should-deploy-preview=false" >> $GITHUB_OUTPUT
              echo "should-deploy-staging=false" >> $GITHUB_OUTPUT
              echo "should-deploy-production=true" >> $GITHUB_OUTPUT
            fi
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "should-deploy-preview=false" >> $GITHUB_OUTPUT
            echo "should-deploy-staging=false" >> $GITHUB_OUTPUT
            echo "should-deploy-production=false" >> $GITHUB_OUTPUT
            echo "environment=none" >> $GITHUB_OUTPUT
          fi

      - name: Display deployment plan
        run: |
          echo "üéØ Deployment Plan:"
          echo "  Preview: ${{ steps.deployment-check.outputs.should-deploy-preview }}"
          echo "  Staging: ${{ steps.deployment-check.outputs.should-deploy-staging }}"
          echo "  Production: ${{ steps.deployment-check.outputs.should-deploy-production }}"
          echo "  Environment: ${{ steps.deployment-check.outputs.environment }}"

  # ===========================================
  # STAGE 2: Code Quality (Parallel Jobs)
  # ===========================================
  lint-and-typecheck:
    name: üîç Lint and Type Check
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Run ESLint
        run: pnpm lint

      - name: TypeScript type check
        run: pnpm type-check

      - name: Upload ESLint results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: eslint-results
          path: |
            eslint-results.json
            eslint-results.xml
          retention-days: 30

  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Security audit
        run: pnpm audit --audit-level moderate

      - name: Upload security results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-results
          path: |
            security-audit-results.json
          retention-days: 30

  code-quality:
    name: üìä Code Quality Checks
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Run ESLint with detailed reporting
        run: |
          pnpm lint --format json --output-file eslint-results.json || true
          pnpm lint --format junit --output-file eslint-results.xml || true

      - name: TypeScript type checking
        run: pnpm type-check

      - name: Upload code quality results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-quality-results
          path: |
            eslint-results.json
            eslint-results.xml
          retention-days: 30

  performance-check:
    name: ‚ö° Performance Check
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build application
        run: pnpm build

      - name: Analyze bundle size
        run: |
          echo "üì¶ Bundle Analysis:"
          find dist -name "*.js" -exec ls -lh {} \; | awk '{print $5, $9}' | sort -hr
          find dist -name "*.css" -exec ls -lh {} \; | awk '{print $5, $9}' | sort -hr
          
          # Check for large files
          LARGE_JS=$(find dist -name "*.js" -size +500k | wc -l)
          LARGE_CSS=$(find dist -name "*.css" -size +100k | wc -l)
          
          if [ $LARGE_JS -gt 0 ]; then
            echo "‚ö†Ô∏è Warning: Found $LARGE_JS JavaScript files larger than 500KB"
            find dist -name "*.js" -size +500k -exec ls -lh {} \;
          fi
          
          if [ $LARGE_CSS -gt 0 ]; then
            echo "‚ö†Ô∏è Warning: Found $LARGE_CSS CSS files larger than 100KB"
            find dist -name "*.css" -size +100k -exec ls -lh {} \;
          fi

  # ===========================================
  # STAGE 3: Build & Test
  # ===========================================
  build:
    name: üèóÔ∏è Stage 3: Build & Test
    runs-on: ubuntu-latest
    needs: [setup, lint-and-typecheck, security-scan, code-quality, performance-check]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: production
          VITE_APP_ENV: ${{ needs.setup.outputs.environment }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

      - name: Build success notification
        run: |
          echo "‚úÖ Build completed successfully!"
          echo "Environment: ${{ needs.setup.outputs.environment }}"
          echo "Artifacts uploaded for deployment"

  # ===========================================
  # STAGE 4: Deployment (Conditional)
  # ===========================================
  deploy-preview:
    name: üöÄ Deploy Preview
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.should-deploy-preview == 'true'
    environment: preview
    permissions:
      contents: read
      pull-requests: write
      issues: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: production
          VITE_APP_ENV: preview

      - name: Deploy to Vercel (Preview)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('üöÄ Preview deployment')
            );
            
            const previewUrl = process.env.VERCEL_URL ? `https://${process.env.VERCEL_URL}` : 'Preview URL not available';
            
            const commentBody = `## üöÄ Preview deployment ready!
            
            **Preview URL:** ${previewUrl}
            
            This preview will be automatically updated when you push new commits to this PR.
            
            ---
            *This comment will be updated automatically.*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

  deploy-staging:
    name: üöÄ Deploy Staging
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.should-deploy-staging == 'true'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: production
          VITE_APP_ENV: staging

      - name: Deploy to Vercel (Preview)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          vercel-args: '--prebuilt'

  deploy-production:
    name: üöÄ Deploy Production
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.should-deploy-production == 'true'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: production
          VITE_APP_ENV: production

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          vercel-args: '--prod'

  # ===========================================
  # PIPELINE COMPLETION
  # ===========================================
  pipeline-complete:
    name: ‚úÖ Pipeline Complete
    runs-on: ubuntu-latest
    needs: [setup, build, deploy-preview, deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Pipeline Summary
        run: |
          echo "üéâ Comprehensive Pipeline Complete!"
          echo ""
          echo "üìä Stage Results:"
          echo "  ‚úÖ Stage 1 (Setup): ${{ needs.setup.result }}"
          echo "  ‚úÖ Stage 2 (Code Quality): Completed"
          echo "  ‚úÖ Stage 3 (Build): ${{ needs.build.result }}"
          echo ""
          echo "üöÄ Deployment Results:"
          echo "  Preview: ${{ needs.deploy-preview.result || 'skipped' }}"
          echo "  Staging: ${{ needs.deploy-staging.result || 'skipped' }}"
          echo "  Production: ${{ needs.deploy-production.result || 'skipped' }}"
          echo ""
          echo "Environment: ${{ needs.setup.outputs.environment }}"
          
          # Check if any deployment failed
          if [[ "${{ needs.deploy-preview.result }}" == "failure" || "${{ needs.deploy-staging.result }}" == "failure" || "${{ needs.deploy-production.result }}" == "failure" ]]; then
            echo "‚ùå One or more deployments failed!"
            exit 1
          else
            echo "‚úÖ All deployments successful!"
          fi
