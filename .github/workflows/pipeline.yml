name: Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: false
        default: 'prod'
        type: choice
        options:
          - dev
          - prod
      pr_number:
        description: 'PR number to rebase (for rebase workflow)'
        required: false
        type: string
      force_rebase:
        description: 'Force rebase even if up to date'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '20'

concurrency:
  group: pipeline-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ===========================================
  # STAGE 1: Setup & Validation
  # ===========================================
  setup:
    name: "üöÄ Stage 1: Setup & Validation"
    runs-on: ubuntu-latest
    outputs:
      should-deploy-dev: ${{ steps.deployment-check.outputs.should-deploy-dev }}
      should-deploy-prod: ${{ steps.deployment-check.outputs.should-deploy-prod }}
      should-sync-to-production: ${{ steps.deployment-check.outputs.should-sync-to-production }}
      environment: ${{ steps.deployment-check.outputs.environment }}
      needs-rebase: ${{ steps.rebase-check.outputs.needs-rebase }}
      has-merge-commits: ${{ steps.rebase-check.outputs.has-merge-commits }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Determine deployment strategy
        id: deployment-check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.environment }}" == "dev" ]]; then
              echo "should-deploy-dev=true" >> $GITHUB_OUTPUT
              echo "should-deploy-prod=false" >> $GITHUB_OUTPUT
              echo "should-sync-to-production=false" >> $GITHUB_OUTPUT
              echo "environment=dev" >> $GITHUB_OUTPUT
            else
              # prod environment
              echo "should-deploy-dev=false" >> $GITHUB_OUTPUT
              echo "should-deploy-prod=true" >> $GITHUB_OUTPUT
              # Always sync when deploying to prod (regardless of input)
              echo "should-sync-to-production=true" >> $GITHUB_OUTPUT
              echo "environment=prod" >> $GITHUB_OUTPUT
            fi
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "should-deploy-dev=true" >> $GITHUB_OUTPUT
            echo "should-deploy-prod=false" >> $GITHUB_OUTPUT
            echo "should-sync-to-production=false" >> $GITHUB_OUTPUT
            echo "environment=dev" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "should-deploy-dev=true" >> $GITHUB_OUTPUT
            echo "should-deploy-prod=false" >> $GITHUB_OUTPUT
            echo "should-sync-to-production=false" >> $GITHUB_OUTPUT
            echo "environment=dev" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should-deploy-dev=false" >> $GITHUB_OUTPUT
            echo "should-deploy-prod=true" >> $GITHUB_OUTPUT
            echo "should-sync-to-production=false" >> $GITHUB_OUTPUT
            echo "environment=prod" >> $GITHUB_OUTPUT
          else
            echo "should-deploy-dev=false" >> $GITHUB_OUTPUT
            echo "should-deploy-prod=false" >> $GITHUB_OUTPUT
            echo "should-sync-to-production=false" >> $GITHUB_OUTPUT
            echo "environment=none" >> $GITHUB_OUTPUT
          fi

      - name: Check rebase status (for PRs)
        id: rebase-check
        if: github.event_name == 'pull_request'
        run: |
          git fetch origin develop
          
          # Check if PR is behind develop
          BEHIND_COUNT=$(git rev-list --count origin/develop..HEAD)
          AHEAD_COUNT=$(git rev-list --count HEAD..origin/develop)
          
          echo "behind-count=$BEHIND_COUNT" >> $GITHUB_OUTPUT
          echo "ahead-count=$AHEAD_COUNT" >> $GITHUB_OUTPUT
          
          if [ $BEHIND_COUNT -gt 0 ]; then
            echo "needs-rebase=true" >> $GITHUB_OUTPUT
            echo "‚ùå PR is $BEHIND_COUNT commits behind develop"
          else
            echo "needs-rebase=false" >> $GITHUB_OUTPUT
            echo "‚úÖ PR is up to date with develop"
          fi
          
          # Check for merge commits
          MERGE_COMMITS=$(git log --merges origin/develop..HEAD | wc -l)
          echo "merge-commits=$MERGE_COMMITS" >> $GITHUB_OUTPUT
          
          if [ $MERGE_COMMITS -gt 0 ]; then
            echo "has-merge-commits=true" >> $GITHUB_OUTPUT
            echo "‚ùå PR contains $MERGE_COMMITS merge commits"
          else
            echo "has-merge-commits=false" >> $GITHUB_OUTPUT
            echo "‚úÖ PR has no merge commits"
          fi

      - name: Display deployment plan
        run: |
          echo "üéØ Deployment Plan:"
          echo "  Dev Environment: ${{ steps.deployment-check.outputs.should-deploy-dev }}"
          echo "  Prod Environment: ${{ steps.deployment-check.outputs.should-deploy-prod }}"
          echo "  Sync to Production: ${{ steps.deployment-check.outputs.should-sync-to-production }}"
          echo "  Environment: ${{ steps.deployment-check.outputs.environment }}"
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "  Needs Rebase: ${{ steps.rebase-check.outputs.needs-rebase }}"
            echo "  Has Merge Commits: ${{ steps.rebase-check.outputs.has-merge-commits }}"
          fi

  # ===========================================
  # REBASE CHECK (for PRs only)
  # ===========================================
  rebase-check:
    name: "üîÑ Rebase Check"
    runs-on: ubuntu-latest
    needs: setup
    if: github.event_name == 'pull_request' && (needs.setup.outputs.needs-rebase == 'true' || needs.setup.outputs.has-merge-commits == 'true')
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Add rebase comment to PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const needsRebase = '${{ needs.setup.outputs.needs-rebase }}' === 'true';
            const hasMergeCommits = '${{ needs.setup.outputs.has-merge-commits }}' === 'true';
            
            let commentBody = '## üîÑ Rebase Required\n\n';
            
            if (needsRebase) {
              commentBody += '‚ùå **This PR is behind develop and needs to be rebased.**\n\n';
            }
            
            if (hasMergeCommits) {
              commentBody += '‚ùå **This PR contains merge commits and needs to be rebased.**\n\n';
            }
            
            commentBody += `### üöÄ Quick Rebase Options\n\n`;
            commentBody += `**Option 1: Use the /rebase command**\n`;
            commentBody += `Comment \`/rebase\` in this PR to automatically rebase it.\n\n`;
            commentBody += `**Option 2: Manual Rebase**\n`;
            commentBody += `\`\`\`bash\n`;
            commentBody += `# 1. Switch to your feature branch\n`;
            commentBody += `git checkout ${{ github.head_ref }}\n\n`;
            commentBody += `# 2. Fetch latest changes\n`;
            commentBody += `git fetch origin develop\n\n`;
            commentBody += `# 3. Rebase onto develop\n`;
            commentBody += `git rebase origin/develop\n\n`;
            commentBody += `# 4. Force push (if needed)\n`;
            commentBody += `git push origin ${{ github.head_ref }} --force-with-lease\n`;
            commentBody += `\`\`\`\n\n`;
            commentBody += `**Option 3: Use our helper script**\n`;
            commentBody += `\`\`\`bash\n`;
            commentBody += `./scripts/git-workflow.sh rebase\n`;
            commentBody += `\`\`\`\n\n`;
            commentBody += `---\n`;
            commentBody += `*This check will pass once the PR is properly rebased.*`;
            
            // Check if rebase comment already exists
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const rebaseComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('üîÑ Rebase Required')
            );
            
            if (rebaseComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: rebaseComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
            }

      - name: Fail the check
        run: |
          echo "‚ùå PR must be rebased before merging"
          echo "This check will pass once the PR is properly rebased onto develop"
          exit 1

  # ===========================================
  # STAGE 2: Code Quality (Parallel Jobs)
  # ===========================================
  lint-and-typecheck:
    name: "üîç Lint and Type Check"
    runs-on: ubuntu-latest
    needs: [setup, rebase-check]
    if: always() && (needs.setup.result == 'success' && (needs.rebase-check.result == 'success' || needs.rebase-check.result == 'skipped'))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Run ESLint
        run: pnpm lint

      - name: TypeScript type check
        run: pnpm type-check

      - name: Upload ESLint results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: eslint-results
          path: |
            eslint-results.json
            eslint-results.xml
          retention-days: 30

  security-scan:
    name: "üîí Security Scan"
    runs-on: ubuntu-latest
    needs: [setup, rebase-check]
    if: always() && (needs.setup.result == 'success' && (needs.rebase-check.result == 'success' || needs.rebase-check.result == 'skipped'))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Security audit
        run: pnpm audit --audit-level moderate

      - name: Upload security results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-results
          path: |
            security-audit-results.json
          retention-days: 30

  code-quality:
    name: "üìä Code Quality Checks"
    runs-on: ubuntu-latest
    needs: [setup, rebase-check]
    if: always() && (needs.setup.result == 'success' && (needs.rebase-check.result == 'success' || needs.rebase-check.result == 'skipped'))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Run ESLint with detailed reporting
        run: |
          pnpm lint --format json --output-file eslint-results.json || true
          pnpm lint --format junit --output-file eslint-results.xml || true

      - name: TypeScript type checking
        run: pnpm type-check

      - name: Upload code quality results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-quality-results
          path: |
            eslint-results.json
            eslint-results.xml
          retention-days: 30

  performance-check:
    name: "‚ö° Performance Check"
    runs-on: ubuntu-latest
    needs: [setup, rebase-check]
    if: always() && (needs.setup.result == 'success' && (needs.rebase-check.result == 'success' || needs.rebase-check.result == 'skipped'))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build application
        run: pnpm build

      - name: Analyze bundle size
        run: |
          echo "üì¶ Bundle Analysis:"
          find dist -name "*.js" -exec ls -lh {} \; | awk '{print $5, $9}' | sort -hr
          find dist -name "*.css" -exec ls -lh {} \; | awk '{print $5, $9}' | sort -hr
          
          # Check for large files
          LARGE_JS=$(find dist -name "*.js" -size +500k | wc -l)
          LARGE_CSS=$(find dist -name "*.css" -size +100k | wc -l)
          
          if [ $LARGE_JS -gt 0 ]; then
            echo "‚ö†Ô∏è Warning: Found $LARGE_JS JavaScript files larger than 500KB"
            find dist -name "*.js" -size +500k -exec ls -lh {} \;
          fi
          
          if [ $LARGE_CSS -gt 0 ]; then
            echo "‚ö†Ô∏è Warning: Found $LARGE_CSS CSS files larger than 100KB"
            find dist -name "*.css" -size +100k -exec ls -lh {} \;
          fi

  # ===========================================
  # REBASE VIA COMMENT
  # ===========================================
  rebase-via-comment:
    name: "üîÑ Rebase via Comment"
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' && github.event.issue.pull_request && contains(github.event.comment.body, '/rebase')
    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
      - name: Get PR number
        id: pr-number
        run: |
          echo "pr-number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              issue_number: ${{ steps.pr-number.outputs.pr-number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üîÑ **Rebase initiated!**\n\nI\'m rebasing this PR onto develop. This may take a few moments...'
            });

      - name: Trigger rebase workflow
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Trigger the auto-rebase workflow
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'pipeline.yml',
              ref: 'develop',
              inputs: {
                pr_number: '${{ steps.pr-number.outputs.pr-number }}',
                force_rebase: 'true'
              }
            });

  # ===========================================
  # AUTO REBASE (Manual Trigger)
  # ===========================================
  auto-rebase:
    name: "üîÑ Auto Rebase PR"
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.pr_number
    permissions:
      contents: write
      pull-requests: write
      statuses: write
    
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Get PR information
        id: pr-info
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ github.event.inputs.pr_number }}
            });
            
            return {
              head_ref: pr.head.ref,
              head_sha: pr.head.sha,
              base_ref: pr.base.ref,
              title: pr.title,
              number: pr.number
            };

      - name: Checkout PR branch
        run: |
          git fetch origin ${{ steps.pr-info.outputs.head_ref }}
          git checkout ${{ steps.pr-info.outputs.head_ref }}

      - name: Check if rebase is needed
        id: check-rebase
        run: |
          git fetch origin develop
          
          BEHIND_COUNT=$(git rev-list --count origin/develop..HEAD)
          AHEAD_COUNT=$(git rev-list --count HEAD..origin/develop)
          
          echo "behind-count=$BEHIND_COUNT" >> $GITHUB_OUTPUT
          echo "ahead-count=$AHEAD_COUNT" >> $GITHUB_OUTPUT
          
          if [ $BEHIND_COUNT -gt 0 ] || [ "${{ github.event.inputs.force_rebase }}" == "true" ]; then
            echo "needs-rebase=true" >> $GITHUB_OUTPUT
            echo "üîÑ PR needs rebase (behind: $BEHIND_COUNT, force: ${{ github.event.inputs.force_rebase }})"
          else
            echo "needs-rebase=false" >> $GITHUB_OUTPUT
            echo "‚úÖ PR is up to date with develop"
          fi

      - name: Perform rebase
        if: steps.check-rebase.outputs.needs-rebase == 'true'
        run: |
          echo "üîÑ Starting rebase process..."
          
          # Rebase onto develop
          if git rebase origin/develop; then
            echo "‚úÖ Rebase completed successfully"
            
            # Force push with lease
            git push origin ${{ steps.pr-info.outputs.head_ref }} --force-with-lease
            echo "‚úÖ Force pushed rebased branch"
          else
            echo "‚ùå Rebase failed due to conflicts"
            echo "Please resolve conflicts manually and try again"
            exit 1
          fi

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const needsRebase = '${{ steps.check-rebase.outputs.needs-rebase }}' === 'true';
            const behindCount = '${{ steps.check-rebase.outputs.behind-count }}';
            
            let commentBody;
            
            if (needsRebase) {
              commentBody = `## ‚úÖ Rebase Completed Successfully!\n\n`;
              commentBody += `üîÑ **This PR has been automatically rebased onto develop**\n\n`;
              commentBody += `- **Commits behind:** ${behindCount}\n`;
              commentBody += `- **Status:** Ready for merge üöÄ\n\n`;
              commentBody += `The PR is now up to date with the latest develop branch.`;
            } else {
              commentBody = `## ‚ÑπÔ∏è No Rebase Needed\n\n`;
              commentBody += `This PR is already up to date with develop. No rebase was performed.`;
            }
            
            await github.rest.issues.createComment({
              issue_number: ${{ github.event.inputs.pr_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

  # ===========================================
  # STAGE 3: Build & Test
  # ===========================================
  build:
    name: "üèóÔ∏è Stage 3: Build & Test"
    runs-on: ubuntu-latest
    needs: [setup, lint-and-typecheck, security-scan, code-quality, performance-check]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Clear cache after install
        run: |
          pnpm store prune || true
          pnpm cache clean --force || true

      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: production
          VITE_APP_ENV: ${{ needs.setup.outputs.environment }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

      - name: Build success notification
        run: |
          echo "‚úÖ Build completed successfully!"
          echo "Environment: ${{ needs.setup.outputs.environment }}"
          echo "Artifacts uploaded for deployment"

  # ===========================================
  # SYNC TO PRODUCTION (Manual)
  # ===========================================
  sync-to-production:
    name: "üîÑ Sync to Production"
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.should-sync-to-production == 'true'
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Verify develop is ahead of main
        id: verify-sync
        run: |
          git fetch origin main develop
          DEVELOP_COMMITS=$(git rev-list --count origin/main..origin/develop)
          echo "üîç Debug: DEVELOP_COMMITS = $DEVELOP_COMMITS"
          if [ $DEVELOP_COMMITS -eq 0 ]; then
            echo "‚ÑπÔ∏è develop is not ahead of main. Nothing to sync."
            echo "should-sync=false" >> $GITHUB_OUTPUT
            echo "üîç Debug: should-sync=false"
          else
            echo "‚úÖ develop is $DEVELOP_COMMITS commits ahead of main"
            echo "should-sync=true" >> $GITHUB_OUTPUT
            echo "üîç Debug: should-sync=true"
          fi

      - name: Check for merge conflicts
        if: steps.verify-sync.outputs.should-sync == 'true'
        run: |
          # Update both branches to latest
          git fetch origin main develop
          git checkout main
          git pull origin main
          git checkout develop
          git pull origin develop
          
          # Check if merge would create conflicts by trying to merge develop into main
          git checkout main
          if ! git merge --no-commit --no-ff develop; then
            echo "‚ùå Merge conflicts detected. Please resolve manually."
            git merge --abort
            exit 1
          fi
          git merge --abort
          echo "‚úÖ No merge conflicts detected"

      - name: Sync develop to main (Squash)
        if: steps.verify-sync.outputs.should-sync == 'true'
        run: |
          echo "üîç Debug: Starting sync process"
          git checkout main
          git pull origin main
          
          # Create squash merge
          echo "üîç Debug: About to merge develop into main"
          git merge --squash develop
          echo "üîç Debug: Merge completed, creating commit"
          git commit -m "chore: sync develop to main for production deployment

          Synced commits from develop:
          $(git log --oneline origin/main..origin/develop --reverse | sed 's/^/  - /')
          
          Triggered by: ${{ github.actor }}"
          
          echo "üîç Debug: Commit created, pushing to origin"
          git push origin main
          echo "üîç Debug: Push completed successfully"

      - name: Sync success notification
        if: steps.verify-sync.outputs.should-sync == 'true'
        run: |
          echo "‚úÖ Successfully synced develop to main!"
          echo "Production deployment will be triggered automatically."

      - name: No sync needed notification
        if: steps.verify-sync.outputs.should-sync == 'false'
        run: |
          echo "‚ÑπÔ∏è No sync needed - develop is already up to date with main"
          echo "Production deployment will proceed with current main branch"

  # ===========================================
  # STAGE 4: Deployment (Conditional)
  # ===========================================
  deploy-dev:
    name: "üöÄ Deploy Dev"
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.should-deploy-dev == 'true'
    environment: dev
    permissions:
      contents: read
      pull-requests: write
      issues: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: production
          VITE_APP_ENV: dev

      - name: Deploy to Vercel (Dev)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./

      - name: Comment PR with dev URL (if PR)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('üöÄ Dev deployment')
            );
            
            const devUrl = process.env.VERCEL_URL ? `https://${process.env.VERCEL_URL}` : 'Dev URL not available';
            
            const commentBody = `## üöÄ Dev deployment ready!
            
            **Dev URL:** ${devUrl}
            
            This dev deployment will be automatically updated when you push new commits to this PR.
            
            ---
            *This comment will be updated automatically.*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

  deploy-prod:
    name: "üöÄ Deploy Prod"
    runs-on: ubuntu-latest
    needs: [setup, build, sync-to-production]
    if: needs.setup.outputs.should-deploy-prod == 'true'
    environment: prod
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: production
          VITE_APP_ENV: prod

      - name: Deploy to Vercel (Production)
        run: |
          # Install Vercel CLI
          npm install -g vercel@latest
          
          # Set environment variables for Vercel
          export VERCEL_ORG_ID="${{ secrets.VERCEL_ORG_ID }}"
          export VERCEL_PROJECT_ID="${{ secrets.VERCEL_PROJECT_ID }}"
          
          # Deploy to production with explicit branch metadata
          vercel --prod \
            --token="${{ secrets.VERCEL_TOKEN }}" \
            --meta githubCommitSha="$(git rev-parse HEAD)" \
            --meta githubCommitAuthorName="$(git log -1 --pretty=format:'%an')" \
            --meta githubCommitAuthorLogin="$(git log -1 --pretty=format:'%an')" \
            --meta githubDeployment="1" \
            --meta githubOrg="flowly-app" \
            --meta githubRepo="waitlist" \
            --meta githubCommitOrg="flowly-app" \
            --meta githubCommitRepo="waitlist" \
            --meta githubCommitMessage="$(git log -1 --pretty=format:'%s')" \
            --meta githubCommitRef="main" \
            --yes
        env:
          GITHUB_REF: refs/heads/main
          GITHUB_HEAD_REF: ''
          GITHUB_BASE_REF: ''

  # ===========================================
  # AUTO-REVERT ON FAILURE
  # ===========================================
  auto-revert:
    name: "üîÑ Auto Revert on Failure"
    runs-on: ubuntu-latest
    needs: [deploy-prod]
    if: failure() && needs.deploy-prod.result == 'failure'
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Check if last commit was a sync commit
        id: check_sync
        run: |
          LAST_COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ $LAST_COMMIT_MSG == *"sync develop to main for production deployment"* ]]; then
            echo "is_sync=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Last commit was a sync commit, proceeding with revert"
          else
            echo "is_sync=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è Last commit was not a sync commit, skipping revert"
          fi

      - name: Revert sync commit
        if: steps.check_sync.outputs.is_sync == 'true'
        run: |
          # Get the commit hash before the sync
          PREVIOUS_COMMIT=$(git log -2 --pretty=%H | tail -1)
          
          # Reset to previous commit
          git reset --hard $PREVIOUS_COMMIT
          
          # Force push to revert
          git push origin main --force
          
          echo "üîÑ Reverted sync commit due to deployment failure"
          echo "Previous commit: $PREVIOUS_COMMIT"

      - name: Revert notification
        if: steps.check_sync.outputs.is_sync == 'true'
        run: |
          echo "‚ùå Production deployment failed!"
          echo "üîÑ Automatically reverted the sync commit"
          echo "Please check the deployment logs and fix issues before trying again"

  # ===========================================
  # PIPELINE COMPLETION
  # ===========================================
  pipeline-complete:
    name: "‚úÖ Pipeline Complete"
    runs-on: ubuntu-latest
    needs: [setup, build, sync-to-production, deploy-dev, deploy-prod, auto-revert]
    if: always()
    
    steps:
      - name: Pipeline Summary
        run: |
          echo "üéâ Pipeline Complete!"
          echo ""
          echo "üìä Stage Results:"
          echo "  ‚úÖ Stage 1 (Setup): ${{ needs.setup.result }}"
          echo "  ‚úÖ Stage 2 (Code Quality): Completed"
          echo "  ‚úÖ Stage 3 (Build): ${{ needs.build.result }}"
          echo ""
          echo "üîÑ Sync Results:"
          echo "  Sync to Production: ${{ needs.sync-to-production.result || 'skipped' }}"
          echo ""
          echo "üöÄ Deployment Results:"
          echo "  Dev Environment: ${{ needs.deploy-dev.result || 'skipped' }}"
          echo "  Prod Environment: ${{ needs.deploy-prod.result || 'skipped' }}"
          echo ""
          echo "Environment: ${{ needs.setup.outputs.environment }}"
          
          # Check if any deployment failed
          if [[ "${{ needs.deploy-dev.result }}" == "failure" || "${{ needs.deploy-prod.result }}" == "failure" ]]; then
            echo "‚ùå One or more deployments failed!"
            exit 1
          else
            echo "‚úÖ All deployments successful!"
          fi
